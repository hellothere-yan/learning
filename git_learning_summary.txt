git 学习笔记
	1）本地新建版本库（仓库），pwd可以显示当前目录，gitinit可以把当前目录变成git可以管理的仓库。此时目录下面出现一个.git的隐藏文件。
	2）git只对纯文本编辑文件有效果，对二进制文本没有效果，Word是二进制文本编辑，所以不支持Word。
	3）本地仓库由git维护的三棵树组成。第一棵是工作目录，它持有实际文件，第二棵是暂存区（Index），缓存区域，临时保存改动。第三棵是HEAD，指向最后一次提交的结果。编辑完成之后，分两步提交到git。
		--git add //把文件提交到缓冲区
		--git commit -m "修改内容"  //把文件提交到HEAD，但是还没有到远端仓库。

	4） --git diff 查看有哪些修改的内容。different。
		--git log  查看最近更新的日志。如果显示太多显得眼花缭乱可以使用下面的
		--git log --pretty=oneline
		
	5）现有版本和之前版本来回穿梭
		回到过去的版本：
			git reset --hard HEAD^   //^代表回退到上一个版本，两个^ 代表回退到上两个版本，上面100个版本写HEAD~100。
		回到最新的版本：git总有后悔药可以吃。
			git reflog 记录每一次命令。可以擦看到最新版本提交的commit ID；
			git reset --hard +ID号。
	6）在工作区（本地目录）中删除，想要彻底删除，还需要 git rm +文件；并且提交git commit。
		如属于误删，则可以git checkout +文件名。
		 checkout其实使用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以一键还原。

	7）git checkout -b +分支；创建新的分支。相当于git branch +分支，git checkout+分支。
		在新分支上修改文件，在主线上查看是查看不到的，git merge+分支 。之后在主线版本上才可以查看更新。当前分支任务完成之后可以删除当前分支。
		git branch -d+分支；如果丢弃一个已经add commit并且没有合并的分支，则需要强制删除-D。

	8）修复错误时，我们会通过创建新的错误分支进行修复，然后合并，最后删除;

		当手头工作没有完成时，工作先把现场git stash一下，然后去修复的bug，修复后，再git stash pop，回到工作现场。
	9)创建新的分支，如果不想要此分支，git branch -d + 分支即可。如果该分支已经add 并且已经commit 了，则需要强制删除，把-d 换成-D ，即删除没有合并的分支使用git branch -D +分支。

	10）git remote -v显示本地库对应的远端分支。

	11) 在远端创建一个分支test，在本地创建一个开发test分支，开发完毕之后推送到远端对应的分支。
		先要git pull一下，把远端创建的分支拉下来，然后git checkout -b test origin/test,这样在本地创建的分支就和远端创建的分支对应起来了，再git push的时候推送的就是远端test分支。